<?php

namespace Columnis\Model;

use Zend\EventManager\AbstractListenerAggregate;
use Zend\EventManager\EventManagerInterface;
use Zend\Http\Header\Vary;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use Zend\Stdlib\RequestInterface;
use ZF\ContentNegotiation\Request;

class CacheListener extends AbstractListenerAggregate
{

    protected $listeners = array();
    protected $cacheService;

    public function __construct(HtmlCache $cacheService)
    {
        // We store the cache service generated by Zend\Cache from the service manager
        //$cacheService->setExtension('');
        $this->cacheService = $cacheService;
    }

    public function attach(EventManagerInterface $events)
    {
        // The AbstractListenerAggregate we are extending from allows us to attach our even listeners
        $this->listeners[] = $events->attach(MvcEvent::EVENT_ROUTE, array($this, 'getCache'), -1000);
        $this->listeners[] = $events->attach(MvcEvent::EVENT_RENDER, array($this, 'saveCache'), -10000);
    }

    public function getCache(MvcEvent $event)
    {
        $match = $event->getRouteMatch();

        // is valid route?
        if (!$match) {
            return;
        }

        // does our route have the cache flag set to true?
        if ($match->getParam('cache')) {
            $cacheKey = $this->genCacheName($event);

            // get the cache page for this route
            $data = $this->cacheService->getItem($cacheKey);

            // ensure we have found something valid
            if ($data !== null) {
                $response = $event->getResponse();
                $response->setContent($data);

                return $response;
            }
        }
    }

    public function saveCache(MvcEvent $event)
    {
        $match = $event->getRouteMatch();

        // is valid route?
        if (!$match) {
            return;
        }

        // does our route have the cache flag set to true?
        if ($match->getParam('cache')) {
            $response = $event->getResponse();
            $data = $response->getContent();

            $this->setCacheDir($match);
            $cacheKey = $this->genCacheName($event);
            $this->cacheService->setItem($cacheKey, $data);
        }
    }

    public function setCacheDir(RouteMatch $match)
    {
        $params = $match->getParams();
        $lang = $params['lang'];
        $options = $this->cacheService->getOptions();
        $options->setNamespace($lang);
    }

    /**
     * @param \Zend\Mvc\Router\RouteMatch $match
     */
    public function genCacheName(MvcEvent $event)
    {
        return $this->generateRequestMd5($event->getRequest());
    }

    private function generateRequestMd5(RequestInterface $request): string
    {
        // Get the URL
        $url = $request->getUriString();

        // Get query parameters
        $queryParams = $request->getQuery()->toArray();
        ksort($queryParams);

        // Get Vary headers
        $varyHeaders = [];
        $varyHeader = $request->getHeader('Vary');
        if ($varyHeader instanceof Vary) {
            $varyFields = $varyHeader->getFieldValue();
            foreach ($varyFields as $field) {
                $header = $request->getHeader($field);
                if ($header) {
                    $varyHeaders[$field] = $header->getFieldValue();
                }
            }
        }
        ksort($varyHeaders);

        // Combine all elements
        $elements = [
            'method'       => $request->getMethod(),
            'url'          => $url,
            'query'        => http_build_query($queryParams),
            'vary_headers' => $varyHeaders,
        ];

        // Generate and return MD5 hash
        return md5(json_encode($elements));
    }
}